import { parseExitCodes } from "../exitCodeParser";
import { readFileSync } from "fs";
import * as fs from "fs";
import { it, describe, expect } from "vitest";

const code =
  "";

describe("Exit code parser", () => {
  it("parses the exit code", async () => {
    const exitCodes = await parseExitCodes(
      Buffer.from(code, "base64").toString(),
      fs.readFileSync("public/tree-sitter.wasm"),
      fs.readFileSync("public/tree-sitter-func.wasm"),
    );
    expect(exitCodes).toEqual(["0xffff", "705", "706", "707", "708", "709"]);
  });
});
